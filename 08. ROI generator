// This macro generates regions of interest (roi) from binary images. Loops are organized to generate and store those roi in your folder structure. Roi's are numbered and organized in an sequential manner.
// Roi's are usefull not only for measuring content inside a selection or cell. The roi itself gives a lot of information like area for example. In this study, we take advantage of 
// FIJI Roi manager to save roi coordinates into .zip folders encoded to be adressed to their respective projection or binary image.  
// You can execute this script in FIJI and modify it according to your specific needs to process your samples. Important: this script will only work, if the 
// paths to your folders are all correctly adressed. Make sure that all folders mentioned in the script are correct. For full automation, lease, do create the necessary folders where your raw data is located and the folders where your results
// will be stored. Attention! This script is case sensitive. So check the correct spelling of the names of the paths provided. However, if you are not confident with 
// full automation you can use the command "getDirectory("name of your path") instead of the prefixed liner 
// Test data is available at: https://osf.io/fnj5g (->look for 'Binary' folder)

"### Define paths ####"

ROI = getDirectory("Choose an ROI file Directory");
Binary = getDirectory("Choose an Projection file Directory");

setBatchMode(false)


macro "ROI extraction and organization" {

list = getFileList(Binary);
for(c=0; c<list.length; c++) {
	open(Binary+list[c]);
title =	getTitle();
	name = title; 

run("Duplicate...", " ");
		run("Convert to Mask");
		setAutoThreshold("Otsu dark no-reset");
		setThreshold(255, 255);
		run("Analyze Particles...", "  show=Masks add");   //"### Mask objects within Binary###"
		roiManager("Save", ROI + name +".zip");      //"#### RoiManager: create 'Region of interest'-list and save data ######"
		roiManager("reset")
close();
close();
close();
}
}
