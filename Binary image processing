
// Welcome to A.D.I.C.T. workflow
// 
// This script can be used, modified and redistributed according to GPL v3.0
// No warranty for the outcome for the content of this script.
// Please cite the following puplications relevant for this workflow:
//
//

macro "Binary processing script" {

        run("Set Measurements...", "area mean min integrated limit display redirect=None decimal=3"); 	// Define a set of measurments for further analysis
        raw_Ffh_nc = "~path_your_folder/raw_Bf/Ffh/a_Steady/phase/"	//getDirectory("Choose an raw image folder containing brightfield images "); // let the FIJI know, where the raw images are stored     
        raw_Ffh_30min = "~path_your_folder/Ffh/b_30min/phase/"
        raw_Ffh_60min = "~path_your_folder/raw_Bf/Ffh/c_60min/phase/"

        raw_FtsY_nc = 	"~path_your_folder/raw_Bf/FtsY/a_Steady/phase/"		//getDirectory("Choose an raw image folder containing brightfield images "); // let the FIJI know, where the raw images are stored     
        raw_FtsY_30min = "~path_your_folder/raw_Bf/FtsY/b_30min/phase/"
        raw_FtsY_60min = "~path_your_folder/raw_Bf/FtsY/c_60min/phase/"

        raw_L1_nc = "~path_your_folder/raw_Bf/L1/a_Steady/phase/"			//getDirectory("Choose an raw image folder containing brightfield images "); // let the FIJI know, where the raw images are stored     
        raw_L1_30min = "~path_your_folder/raw_Bf/L1/b_30min/phase/"
        raw_L1_60min = "~path_your_folder/raw_Bf/L1/c_60min/phase/"
        
        Masks = 	 "~path_your_folder/Masks/"							   //getDirectory("Choose an Mask Folder"); // let the FIJI know, where the processed images are stored
        
        setBatchMode(false); // set "true" if you want to monitor transformation and processing progress virtually

        list1 = getFileList(raw_Ffh_nc);
		list2 = getFileList(raw_Ffh_30min);
		list3 = getFileList(raw_Ffh_60min);
		list4 = getFileList(raw_FtsY_nc);
		list5 = getFileList(raw_FtsY_30min);
		list6 = getFileList(raw_FtsY_60min);
		list7 = getFileList(raw_L1_nc);
		list8 = getFileList(raw_L1_30min);
		list9 = getFileList(raw_L1_60min);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Now continue to loop forward using a set of "for" loops...
		

		for(c=0; c<list1.length; c++) {
		open(raw_Ffh_nc+list1[c]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "Ffh_nc_" + name); 						    		//save as .tiff using an iteration for timepoint and image number
            
            
             run("Close All");
             					
             					
        
		}


		for(i=0; i<list2.length; i++) {
		open(raw_Ffh_30min+list2[i]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "Ffh_30min_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
            run("Close All");
             					
        
		}


		for(z=0; z<list3.length; z++) {
		open(raw_Ffh_60min+list3[z]);
		title =	getTitle();
		name = title; 
	

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "Ffh_60min_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
            run("Close All");
             					
        
		}

		

		for(b=0; b<list4.length; b++) {
		open(raw_FtsY_nc+list4[b]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "FtsY_nc_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
             run("Close All");
             					
             					
        
		}

		for(y=0; y<list5.length; y++) {
		open(raw_FtsY_30min+list5[y]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "FtsY_30min_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
            run("Close All");
             					
        
		}


		for(o=0; o<list6.length; o++) {
		open(raw_FtsY_60min+list6[o]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "FtsY_60min_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
            run("Close All");
             					
        
		}


		


		for(p=0; p<list7.length; p++) {
		open(raw_L1_nc+list7[p]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "L1_nc_" + name); 									//save as .tiff using an iteration for timepoint and image number
            
            
             run("Close All");
             					
             					
        
		}

		for(l=0; l<list8.length; l++) {
		open(raw_L1_30min+list8[l]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "L1_30min_" + name); 								//save as .tiff using an iteration for timepoint and image number
            
            
            run("Close All");
             					
        
		}


		for(k=0; k<list9.length; k++) {
		open(raw_L1_60min+list9[k]);
		title =	getTitle();
		name = title; 
		

           	
         	run("Duplicate...", " ");													//always use duplicates not raw images
    		run("Kuwahara Filter", "sampling=2");
    		run("8-bit");																//transform 16-bit image into 8-bit for binary processing step
    		
    		run("Auto Threshold", "method=Percentile black");								//set threshold; other methods can be applied respectively
    		
    		run("Make Binary");															//process binary images
    		
    		run("Fill Holes");															//fill holes within cells 
    		
    		run("Watershed"); 															//use watershed algorithm for segmenation
    		 
            saveAs("tiff", Masks + "L1_60min" + name); 									//save as .tiff using an iteration for timepoint and image number
                        
            run("Close All");
             					
        
		}

}
